#!/usr/bin/env node
const app = require('../app');
const http = require('http');
const express = require('express');
const log = require('../config/log');
const mongoose = require('mongoose');
const redis = require('../db/redis');

// Get port from environment.
var port = normalizePort(process.env.PORT || '3080');
// app.set('port', port);
let server = http.createServer(app);
// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

// Event listener for http server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // Handle specific listen errors with friendly messages.
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for http server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  log.info('Listening on ' + bind);
}

// Treat signals to close app.
let signs = ['SIGINT', 'SIGTERM', 'SIGQUIT'];
signs.forEach(signal=>{
  process.on(signal, ()=>{
    log.info(`${signal} signal received.`);
    finishApp();
  });
});

// Finish app.
function finishApp() {
  log.info('Finishing app.');
  // Close http server.
  server.close(function(err) {
    if (err) {
      log.error(err.stack);
      process.exit(1)
    }
    log.info('Server closed.');
    // Close mongoose. 
    mongoose.connection.close(()=>{
      // Close redis.
      redis.quit(()=>{
        log.info('Redis closed.')
        log.info('App ended.');
        // End app.
        process.exit();
      });
    });
  });
}

module.exports = server;