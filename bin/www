#!/usr/bin/env node
const app = require('../app');
const http = require('http');
const https = require('https');
const express = require('express');
const fs = require('fs');
const log = require('../config/log');
const mongoose = require('mongoose');

// Get ssh key and certificate.
let sshOptions = {
  key: fs.readFileSync('./key.pem'),
  cert: fs.readFileSync('./cert.pem'),
  passphrase: 'umdoistres'
  // requestCert: false,
  // rejectUnauthorized: false
};

// Get port from environment and store in Express (change 3080 port to 80 on production).
var port = normalizePort(process.env.PORT || '3080');
// app.set('port', port);
// Create server to redirect http to https.
let httpToHttps = express().get('*', function(req, res) {
  res.redirect(`https://${req.headers.host.split(':')[0]}:${portSsl}${req.path}`);
});
let server;
// On production redirect http to https.
if (app.get('env') === 'production') {
  server = http.createServer(httpToHttps);
} 
// Http for development mode.
else  {
  server = http.createServer(app);

}
// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


// Create https server (change 3088 port to 443 on production).
var portSsl = normalizePort(process.env.PORT_SSL || '3088');
app.set('portSsl', portSsl);
var serverSsl = https.createServer(sshOptions, app);
serverSsl.listen(portSsl);
serverSsl.on('error', onError);
serverSsl.on('listening', onListeningSsl);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // Handle specific listen errors with friendly messages.
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
function onErrorSsl(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + portSsl
    : 'Port ' + portSsl;
  // Handle specific listen errors with friendly messages.
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  log.info('Http  Listening on ' + bind);
}
function onListeningSsl() {
  var addr = serverSsl.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  log.info('Https Listening on ' + bind);
}

process.on('SIGINT', () => {
  log.info('SIGINT signal received.');
  // Stops the server from accepting new connections and finishes connections.
  server.close(function(err) {
    if (err) {
      log.error(err.stack);
      process.exit(1)
    }
    log.info('Http server closed.')
  });
  serverSsl.close(function(err) {
    if (err) {
      log.error(err.stack);
      process.exit(1)
    }
    log.info('Https server closed.')
  });
  mongoose.connection.close();
})