extends ../layout/layout

block title
    title Zoom - Pedido

block append css
    link(rel="stylesheet" href="/css/admin/zoomOrder.css?0001" charset="utf-8")

block content 
    section.shadow
        h2.title(class=zoomOrder.status)
            span [Zoom] Pedido&nbsp
            case zoomOrder.status
                when 'new'
                    span novo
                when 'approvedpayment'
                    span pago
                when 'processed'
                    span processado
                when 'shipped'
                    span enviado
                when 'delivered'
                    span entregue
                when 'canceled'
                    span cancelado
                default
                    span [Erro] #{zoomOrder.status}
        case zoomOrder.status
            when 'new'
                h3(class='verifyPayment') Aguarde o pagamento
            when 'approvedpayment'
                h3(class='send') Pedido deve ser processado
            when 'processed'
                h3(class='send') Pedido deve ser enviado
            when 'shipped'
                h3(class='verifyDelivery') Verificar se o pedido foi entrege
            when 'delivered'
            when 'canceled'
                h3
            default
                h3(class='') #{zoomOrder.status}
        //- h2.title(class=order.status) 
            span Pedido&nbsp
            case order.status
                when 'canceled'
                    span cancelado
                when 'delivered'
                    span entregue
                when 'shipped'
                    span enviado
                when 'paid'
                    span pago
        //- Action.
        //- case order.status
            when 'shipped'
                h3(class='verifyDelivery') Verificar se o pedido foi entrege
            when 'paid'
                h3(class='send') Pedido deve ser enviado

        h3 Data do pedido 
        p= formatDate(zoomOrder.creation_date)

        h3 Número [Zunka]
        p= order._id

        h3 Número [Zoom]
        p= zoomOrder.order_number

        //- User.
        h3 Usuário
        p=  zoomOrder.customer.first_name
        //- a(:href='`mailto:${this.order.email}`') {{ order.email }}
        a(href=`tel:${zoomOrder.customer.user_phone}`) #{zoomOrder.customer.user_phone} &nbsp [Telefone]
        if zoomOrder.customer.cpf
            p #{zoomOrder.customer.cpf} &nbsp [CPF]
        if zoomOrder.customer.cnpj
            p #{zoomOrder.customer.cnpj} &nbsp [CNPJ]

        //- Address.
        h3 Destinatário
        p= zoomOrder.delivery_address.address_receiver 
        p #{zoomOrder.delivery_address.address_place},  #{zoomOrder.delivery_address.address_number} - #{zoomOrder.delivery_address.additional_info}
        p= zoomOrder.delivery_address.neighborhood
        p #{zoomOrder.delivery_address.city} - #{zoomOrder.delivery_address.state} - Brasil
        p= zoomOrder.delivery_address.zipcode 

        //- Delivery.
        h3 Envio - #{zoomOrder.shipping.shipping_method_name} - #{zoomOrder.shipping.shipping_method_id}
        p #{zoomOrder.shipping.estimate_shipping} dia(s) &nbsp - &nbsp #{formatMoney(zoomOrder.shipping.freight_price)} &nbsp&nbsp  

        // Products price.
        if zoomOrder.items
            - var totalPrice = 0
            each item in zoomOrder.items
                - totalPrice += item.total    
        // Shipping price.
        - totalPrice += zoomOrder.shipping.freight_price
        // Discount.
        if zoomOrder.total_discount_value
            - totalPrice -= zoomOrder.total_discount_value

        h3 Desconto
        if zoomOrder.total_discount_value
            p #{formatMoney(zoomOrder.total_discount_value)}
        else
            p #{formatMoney(0)}

        h3 Pagamento
        p #{formatMoney(totalPrice)}

        //- Items.
        if zoomOrder.items
            h3 Produtos
            ul
                each item in zoomOrder.items
                    li
                        - var addS = item.amount > 1 ? "s" : ""
                        a(href=`/admin/product/${item.product_id}`) #{item.product_name}
                        p #{formatMoney(item.product_price)}
                        p #{item.amount} unidade#{addS}

        //- Change order status.
        .change-status
            .buttons
                //- Show set status.
                if zoomOrder.status == 'approvedpayment' || zoomOrder.status == 'processed' || zoomOrder.status == 'shipped'
                    input#btn-show-set-status.btn-primary(type='button' onclick='showSetStatus()' value='value')
                //- Show invoice.
                if zoomOrder.status == 'processed' || zoomOrder.status == 'shipped' || zoomOrder.status == 'delivered'
                    input.btn-primary(type='button' onclick='window.location.href=`/admin/invoice-by-order/${order._id}`;' value='Nota fiscal')

        //- Exit.
        input.btn-exit(type='button' onclick='window.location.href="/admin/orders"' value='Sair') 
        //- input.btn-exit(type='button' onclick='javascript:history.back()' value='Sair') 

        //- Window to set status.
        #set-status
            .panel
                .item
                    h3#title-set-status.title message
                    if zoomOrder.status == 'processed'
                        //- Data de envio.
                        label(for='sentDate') Data de envio
                        input(type='datetime-local' id='sentDate' value=today)
                        p#invalidSentDate.invalid

                        //- Carrier name.
                        label(for='carrierName') Transportadora
                        input(type='text' id='carrierName' value='Correios')
                        p#invalidCarrierName.invalid

                        //- Tracking number.
                        label(for='trackingNumber') Número de rastreamento
                        input(type='text' id='trackingNumber' value='')
                        p#invalidTrackingNumber.invalid

                        //- Tracking URL.
                        label(for='trackingUrl') URL de rastreamento
                        input(type='text' id='trackingUrl' value='www.correios.com.br')
                        p#invalidTrackingUrl.invalid
                    if zoomOrder.status == 'shipped'
                        //- Data da entrega.
                        label(for='deliveryDate') Data da entrega
                        input(type='datetime-local' id='deliveryDate' value=today)
                        p#invalidDeliveryDate.invalid

                .buttons
                    input.btn-primary(type='button' onclick='setStatus()' value='Sim')
                    input.btn-exit(type='button' onclick='divSetStatus.style.display = "none"' value='Não')

append external_scripts
    include ../components/axios.js.pug

append internal_scripts
    script.
        let order = !{JSON.stringify(order)};
        let zoomOrder = !{JSON.stringify(zoomOrder)};
        //- zoomOrder.status = zoomOrder.status.toLowerCase();
        // Elements.
        let divSetStatus = document.getElementById('set-status');
        let titleSetStatus = document.getElementById('title-set-status');
        let btnShowSetStatus = document.getElementById('btn-show-set-status');
        let inputSentDate = document.getElementById('sentDate');
        let inputCarrierName = document.getElementById('carrierName');
        let inputTrackingNumber = document.getElementById('trackingNumber');
        let inputTrackingUrl = document.getElementById('trackingUrl');
        let inputDeliveryDate = document.getElementById('deliveryDate');
        let InvalidSentDate = document.getElementById('invalidSentDate');
        let InvalidCarrierName = document.getElementById('invalidCarrierName');
        let InvalidTrackingNumber = document.getElementById('invalidTrackingNumber');
        let InvalidTrackingUrl = document.getElementById('invalidTrackingUrl');
        let InvalidDeliveryDate = document.getElementById('invalidDeliveryDate');
        // Show set status panel on load.
        if (!!{showSetStatusPanel}) {
            divSetStatus.style.display = 'none';
        }
        // Action
        let action = '';
        switch(zoomOrder.status) {
            case 'approvedpayment':
                action = 'processed'
                titleSetStatus.innerHTML = 'Pedido processado?';
                btnShowSetStatus.value = 'Pedido processado'
                break;
            case 'processed':
                action = 'shipment'
                titleSetStatus.innerHTML = 'Pedido enviado?';
                btnShowSetStatus.value = 'Pedido enviado'
                break;
            case 'shipped':
                action = 'delivered'
                titleSetStatus.innerHTML = 'Pedido entregue?';
                btnShowSetStatus.value = 'Pedido entregue'
                break;
            default:
        }
        // Invalid messages.
        function setInvalidMessages(invalid) {
            if(zoomOrder.status == 'processed') {
                invalidSentDate.innerHTML = invalid.sentDate || '';
                invalidCarrierName.innerHTML = invalid.carrierName || '';
                invalidTrackingNumber.innerHTML = invalid.trackingNumber || '';
                invalidTrackingUrl.innerHTML = invalid.trackingUrl || '';
            }
            if(zoomOrder.status == 'shipped') {
                InvalidDeliveryDate.innerHTML = invalid.deliveryDate || '';
            }
        }
        // Clear invalid messages.
        function clearInvalidMessages() {
            if(zoomOrder.status == 'processed') {
                invalidSentDate.innerHTML = '';
                invalidCarrierName.innerHTML = '';
                invalidTrackingNumber.innerHTML = '';
                invalidTrackingUrl.innerHTML = '';
            }
            if(zoomOrder.status == 'shipped') {
                InvalidDeliveryDate.innerHTML = '';
            }
        }
        // Show set status panel.
        function showSetStatus() {
            //- console.log(`showSetStatus(): ${zoomOrder.status}`);
            if (zoomOrder.status == 'new' || zoomOrder.status == 'approvedpayment' || zoomOrder.status == 'shipped') {
                divSetStatus.style.display = 'flex'
            } 
            else if (zoomOrder.status == 'processed') {
                // Check if invoice has been registered.
                axios.get(`/admin/invoice-by-order/${order._id}/registred`, { headers: {'csrf-token' : csrfToken} })
                .then(response => {
                    // Validation error.
                    if (response.data.success) {
                        // Show set status panel.
                        if (response.data.registred) {
                            divSetStatus.style.display = 'flex'
                        }
                        // Show invoice page.
                        else {
                            window.location.href=`/admin/invoice-by-order/${order._id}?setStatus=true`;
                        }
                    } else {
                        console.error(response.data.errMessage);
                        alert('Alguma coisa não deu certo.');
                    }
                })
                .catch(error => {
                    console.error(error);
                    alert('Alguma coisa não deu certo.');
                })  
            }
        }
        // Set status.
        function setStatus() {
            //- console.log(`action: ${action}`);
            // Process selected freight.
            formData = new FormData();
            data = { action: action, zoomOrderNumber: zoomOrder.order_number };
            // Shipment.
            if (action === 'shipment') {
                data.sentDate = inputSentDate.value;
                data.carrierName = inputCarrierName.value;
                data.trackingNumber = inputTrackingNumber.value;
                data.trackingUrl = inputTrackingUrl.value;
            } 
            // Delivered.
            else if (action === 'delivered') {
                data.deliveryDate = inputDeliveryDate.value;
            }
            axios.post(`/admin/zoom-order/${order._id}`, data, { headers: {'csrf-token' : csrfToken} })
            .then(response => {
                //- console.log(response);
                // Validation error.
                if (response.data.invalid) {
                    setInvalidMessages(response.data.invalid);
                } 
                // Success.
                else if (response.data.success) {
                    window.location.href=`/admin/order/#{order.id}`;
                } 
                else {
                    clearInvalidMessages();
                    console.error(response.data.errMessage);
                    divSetStatus.style.display = 'none';
                    // Give time to hide modal.
                    setTimeout(()=>{
                        alert('Alguma coisa não deu certo.');
                    }, 300);
                }
            })
            .catch(err => {
                console.log(err.stack);
                alert('Alguma coisa não deu certo.');
                //- window.location.href=`/error?err=${err}`;
            })  
        }
